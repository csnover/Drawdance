#!/usr/bin/env perl
# Copyright (c) 2022 askmeaboutloom
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
use 5.020;
use warnings;
use experimental qw(signatures);
use Encode;
use FindBin;
use JSON::PP;

sub slurp($path) {
    open my $fh, '<', $path or die "Can't open '$path': $!";
    my $content = do { local $/; <$fh> };
    close $fh or die "Can't close '$path': $!";
    return decode('UTF-8', $content);
}

sub describe_ident($ident) {
    state %descriptions = (
        'BSD-1-Clause' => 'BSD 1-Clause License',
        'BSD-3-Clause' => 'BSD 3-Clause "New" or "Revised" License',
        'curl' => 'curl License',
        'GPL-2.0-or-later' => 'GNU General Public License (GPL), version 2 or later (being used as version 3)',
        'GPL-3.0' => 'GNU General Public License (GPL), version 3',
        'GPL-3.0-or-later' => 'GNU General Public License (GPL), version 3 or later',
        'MIT' => 'MIT License',
        'Unlicense' => 'Unlicense (public domain)',
        'Zlib' => 'zlib License',
    );
    return $descriptions{$ident} || die "Unknown license identifier '$ident'";
}

sub read_licenses($path) {
    my @licenses;
    open my $fh, '<', $path or die "Can't open '$path': $!";
    while (<$fh>) {
        my $line = decode('UTF-8', $_);
        next if $line !~ /\S/;
        next if $line =~ /\A\s*#/;
        if ($line =~ /\A\s*(.+?)\s*<(.+?)>\s*([\w\-\.]+)\s*(.+?)\s*(?:\[(.+?)\]\s*)?\z/) {
            my ($name, $url, $ident, $path, $targets) = ($1, $2, $3, $4, $5);
            my $text = slurp($path) =~ s/\s+\z//r;
            push @licenses, {
                name => $name,
                url => $url,
                ident => $ident,
                text => $text,
            }
        }
        else {
            die "Can't parse line: '$line'";
        }
    }
    close $fh or die "Can't close '$path': $!";
    return @licenses;
}

sub has_sort_priority($license) {
    return $license->{name} =~ /\A(?:Drawdance|Drawpile)\z/;
}

sub assemble_texts($licenses) {
    my $i = 0;
    my %texts;
    for my $license (@$licenses) {
        my $text = $license->{text};
        if (!$texts{$text}) {
            $texts{$text} = {
                id => ++$i,
                text => $text,
            };
        }
        $license->{text_id} = $texts{$text}{id};
    }
    return %texts;
}

# ImGui chokes on text that is too long.
sub split_texts($text) {
    open my $fh, '<', \$text or die $!;
    my @texts;
    my $lines;
    while (<$fh>) {
        if (!defined $lines || ++$lines >= 10) {
            push @texts, '';
            $lines = 1;
        }
        $texts[-1] .= decode('UTF-8', $_);
    }
    close $fh or die $!;
    return @texts;
}

sub write_lua_license($license, $json) {
    my @fields;
    push @fields, 'ident=' . $json->encode($license->{ident});
    push @fields, 'name=' . $json->encode($license->{name});
    push @fields, "texts=license$license->{text_id}";
    push @fields, 'url=' . $json->encode($license->{url});
    return '{' . join(',', @fields), '}';
}

sub write_lua($licenses, $texts, $json, $path) {
    open my $fh, '>', $path or die "Can't open '$path': $!";
    print {$fh} "-- This is an auto-generated file with the contents of the licenses window.\n";
    print {$fh} "-- Don't edit it directly, look for the generator in scripts/package-licenses.\n";
    for my $t (sort { $a->{id} <=> $b->{id} } values %$texts) {
        print {$fh} 'local license', $t->{id}, ' = {';
        print {$fh} join ',', map { $json->encode($_) }
                                  split_texts(encode('UTF-8', "$t->{text}\n"));
        print {$fh} "}\n";
    }
    print {$fh} 'return {';
    print {$fh} join ',', map { write_lua_license($_, $json) } @$licenses;
    print {$fh} "}\n";
    close $fh or die "Can't close '$path': $!";
}

sub write_ts_license($license, $json, $fh) {
    print {$fh} "  {\n";
    print {$fh} '    ident: ', $json->encode($license->{ident}), ",\n";
    print {$fh} '    name: ', $json->encode($license->{name}), ",\n";
    print {$fh} "    text: license$license->{text_id},\n";
    print {$fh} '    url: ', $json->encode($license->{url}), ",\n";
    print {$fh} "  },\n",
}

sub write_ts($licenses, $texts, $json, $path) {
    open my $fh, '>', $path or die "Can't open '$path': $!";
    print {$fh} "// This is an auto-generated file with the contents of the licenses modal.\n";
    print {$fh} "// Don't edit it directly, look for the generator in scripts/package-licenses.\n\n";
    for my $t (sort { $a->{id} <=> $b->{id} } values %$texts) {
        print {$fh} 'const license', $t->{id}, ': string = ', $json->encode($t->{text}), ";\n\n";
    }
    print {$fh} "export interface License {\n";
    print {$fh} "  ident: string;\n";
    print {$fh} "  name: string;\n";
    print {$fh} "  text: string;\n";
    print {$fh} "  url: string;\n";
    print {$fh} "}\n\n";

    print {$fh} "export const DRAWDANCE_LICENSES: readonly License[] = Object.freeze([\n";
    for my $license (@$licenses) {
        write_ts_license($license, $json, $fh);
    }
    print {$fh} "]);\n";
    close $fh or die "Can't close '$path': $!";
}

chdir "$FindBin::Bin/.." or die "Can't chdir: $!";

my @licenses = sort {
        if (has_sort_priority($a)) {
            return -1 unless has_sort_priority($b);
        } elsif (has_sort_priority($b)) {
            return 1;
        }
        return fc $a->{name} cmp fc $b->{name}
    } read_licenses('3rdparty/licenses/index');

my %texts = assemble_texts(\@licenses);

my $json = JSON::PP->new->canonical->utf8;
write_lua(\@licenses, \%texts, $json, 'appdrawdance/lua/licenses.lua');
write_ts(\@licenses, \%texts, $json, 'appdrawdance/drawdance_web/src/sidebar/Licenses.ts');
